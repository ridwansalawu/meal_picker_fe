{"version":3,"sources":["component/Spinner.js","Home.js","component/Card.js","component/SearchResult.js","component/ResDetails.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","props","console","log","items","length","state","selectedItem","wheelRefs","selectItem","bind","this","setState","map","item","React","createRef","Math","floor","random","onSelectItem","setTimeout","wheelVars","spinning","Fragment","className","ref","wheelRef","style","onClick","index","key","Component","Home","places","favCuisines","Axios","method","url","headers","then","response","cuisineName","data","cuisines","catch","error","sample","_","sampleSize","getName","e","id","cuisine","cuisine_name","getnames","Card","src","card_img","resturant_title","location_name","SearchResult","cityData","searchInput","searchHandler","event","value","target","handleChange","restaurants","restaurant","j","to","name","location","address","featured_image","type","onChange","ResDetails","res_info","resInformation","App","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0852da3.chunk.js","sourcesContent":["import React from 'react'\nimport './Spinner.css'\n\nclass Spinner extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(this.props.items.length)\n        this.state = {\n          selectedItem: null,\n          wheelRefs: []\n        };\n        this.selectItem = this.selectItem.bind(this);\n      }\n      \n      UNSAFE_componentWillReceiveProps(props) {\n        console.log('componentWillReceiveProps: ' + props.items.length);\n        this.setState(state => ({...state, wheelRefs: props.items.map((item) => React.createRef())}))\n      }\n\n      \n\n       selectItem() {\n        if (this.state.selectedItem === null) {\n          const selectedItem = Math.floor(Math.random() * this.props.items.length);\n          if (this.props.onSelectItem) {\n            this.props.onSelectItem(selectedItem);\n          }\n          this.setState({ selectedItem });\n        } else {\n          this.setState({ selectedItem: null });\n          setTimeout(this.selectItem, 500);\n          console.log(\"this.selecteditem ---> \" + this.selectedItem);\n        }\n      }\n    \n      render() {\n        console.log('render: ' + this.props.items.length);\n        const { selectedItem } = this.state;\n        const { items } = this.props;\n    \n        const wheelVars = {\n          '--nb-item': items.length,\n          '--selected-item': selectedItem,\n        };\n        const spinning = selectedItem !== null ? 'spinning' : '';\n        return (\n        <React.Fragment>\n          <div className=\"wheel-container\">\n            <div className={`wheel ${spinning}`} ref={this.wheelRef} style={wheelVars} onClick={() => { this.selectItem(); }}>\n              {items.map((item, index) => (\n                <div className=\"wheel-item\" key={index} style={{ '--item-nb': index }}>\n                  {item}\n                </div>\n              ))}\n            </div>\n          </div>\n          <h2>Let's eat {items[this.state.selectedItem]}</h2>\n          {console.log(\"log items\" + items)}\n          </React.Fragment>\n        );\n      }\n}\n\n\nexport default Spinner;","import React from 'react'\nimport Spinner from './component/Spinner'\nimport Axios from 'axios'\nimport _ from 'lodash'\n// import { Link } from 'react-feather';\n\n\n\nclass Home extends React.Component {\n    constructor() {\n        super();\n        this.places = ['Thai', 'Italian', 'Japanese', 'Brazillian', 'Mexican', 'Fastfood', 'Chinese', 'Pizza', 'Healthy'];\n        this.state = {\n        favCuisines: []\n      }\n      }\n      componentDidMount(){\n        const url_key = 'ce01c524c280392f934d5bb8228b2277'\n        Axios({\n           method: \"GET\",\n           url: `https://developers.zomato.com/api/v2.1/cuisines?city_id=260`,\n           headers: {\n             \"user-key\": url_key,\n             \"content-type\": \"application/json\"\n           }\n         })\n           .then(response => {\n               const cuisineName = response.data.cuisines;\n               this.setState({favCuisines: cuisineName})\n               console.log(this.state.favCuisines)\n           })\n           .catch(error => {   \n             console.log(error);\n           });\n  \n\n      }\n      \n      render(props) {\n        const sample = _.sampleSize(this.state.favCuisines, 15)\n        console.log(sample)\n        const getName = sample.map((e, id) => (\n        <p key={id}>{e.cuisine.cuisine_name}</p> \n        ))\n        const getnames = sample.map((e, id) => (\n          <p key={id}>{e.cuisine.cuisine_name}</p> \n          ))\n        return (\n            <div className=\"App\">\n              <h1>What should I eat for </h1>\n              <Spinner items={getName} />\n              <div>\n               <ul>\n                {getnames}\n               </ul>\n            </div>\n            </div>\n            \n          );\n\n      }\n}\n\nexport default Home;","import React from 'react'\nimport './Card.css'\nimport { Heart,MapPin  } from 'react-feather' \n\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    render() {\n\n    return (\n        <div className=\"card-container\">\n            <div className=\"heart\"><Heart /></div>\n            <div className=\"card-img\">\n                <img className=\"img-fluid\" src={this.props.card_img} />\n            </div>\n            <span  className=\"card-link\">\n                <div className=\"card-img--hover\">\n                {/* <img src={this.props.card_img} /> */}\n                </div>\n                \n            <div className=\"card-info\">\n                <span className=\"cuisine\">{this.props.cuisine}</span>\n                <h3 className=\"resturant-title\">{this.props.resturant_title}</h3>\n                <div className=\"location\">\n                    <div className=\"pin\"><MapPin/></div><span className=\"location_name\">{this.props.location_name}</span>\n                </div>\n            </div>\n            </span>       \n        </div>\n    \n    )}\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\nimport Axios from 'axios'\nimport { Link } from '@reach/router'\nexport default class SearchResult extends React.Component{\n    state = {\n        cityData: [],\n        searchInput: \" \",\n    }\n\n  searchHandler = (event) => {\n \n    const value = event.target.value;\n    this.setState(state => ({...state, searchInput: value}));\n  }\n    \n  handleChange= () => {\n        const url_key = 'c5ff9358cc3104a45cd8df377b24b5a3'\n         Axios({\n            method: \"GET\",\n            url: `https://developers.zomato.com/api/v2.1/search?entity_id=260&entity_type=city&q=${this.state.searchInput}`,\n            headers: {\n              \"user-key\": url_key,\n              \"content-type\": \"application/json\"\n            }\n          })\n            .then(response => {\n                const cityData = response.data.restaurants;\n                this.setState({cityData})\n                console.log(cityData)\n            })\n            .catch(error => {   \n              console.log(error);\n            });\n    }\n    \n    render(){\n\n        const dataAPI = this.state.cityData\n        const getResp = dataAPI.map(e => {\n            return e.restaurant\n        })\n\n    \n        const getName = getResp.map((j)=>  <div className=\"col-4\" key={j.id}>\n        <Link to={'/restaurant/'+ j.id}><Card  resturant_title={j.name} cuisine={j.cuisines} location_name={j.location.address}\n         card_img={j.featured_image} /></Link>\n        </div> )\n        return(\n        <div>\n            <div>\n            <input type='text' onChange={this.searchHandler}></input>\n            <button onClick={this.handleChange}>Search</button>\n            </div>\n            <br/>\n            <div>\n            <div className=\"row\">\n                {getName}\n             </div>    \n            </div>\n        </div>\n        )\n    }\n}","import React from 'react'\nimport Axios from 'axios'\n\nexport default class ResDetails extends React.Component{\n   \n   state={\n       res_info:[]\n   }\n   \n    async componentDidMount(){\n        const url_key = 'ce01c524c280392f934d5bb8228b2277'\n        await Axios({\n           method: \"GET\",\n           url: `https://developers.zomato.com/api/v2.1/restaurant?res_id=${this.props.id}`,\n           headers: {\n             \"user-key\": url_key,\n             \"content-type\": \"application/json\"\n           }\n         })\n           .then(response => {\n               const resInformation = response.data;\n               this.setState({res_info: resInformation})\n               console.log(this.state.res_info)\n           })\n           .catch(error => {   \n             console.log(error);\n           });\n  \n\n      }\n    render(){\n        return(\n            <div>\n                hello\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Home from './Home';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SearchResults from './component/SearchResult'\nimport { Router,Link } from '@reach/router'\nimport ResDetails from './component/ResDetails'\n\nfunction App() {\n  const Homepg =() =>(\n    <div>\n      <nav>\n        <Link to=\"/\">Home</Link>| \n        <Link to=\"/search/\">Search</Link>|\n        <Link to=\"/\">Logout</Link>\n      </nav>\n      <Home/>\n    </div>\n  )\n\n  const Search =()=>(\n    <div>\n      <nav>\n          <Link to=\"/\">Home</Link>| \n          <Link to=\"/search/\">Search</Link>|\n          <Link to=\"/\">Logout</Link>\n        </nav>\n        <SearchResults />\n    </div>\n      \n  )\n  return (\n        <div className=\"App\">\n          <Router>\n            <Homepg path=\"/\" />\n            <Search path=\"/search/\"/>\n            <ResDetails path='/restaurant/:id'/>\n          </Router>\n           \n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}